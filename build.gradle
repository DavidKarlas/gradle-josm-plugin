buildscript {
  repositories {
    jcenter()
  }
}
plugins {
  id "com.gradle.plugin-publish" version "0.9.9"
  id "com.github.ben-manes.versions" version "0.17.0"
  id "org.jetbrains.kotlin.jvm" version "1.2.10"
  id "org.jetbrains.dokka" version "0.9.15"
  id "maven"
  id "eclipse"

  id "java-gradle-plugin"
  id "maven-publish"
}
import java.time.Instant
import java.time.Duration

gradle.taskGraph.beforeTask { task ->
  task.ext.setProperty("startTime", Instant.now())
}
gradle.taskGraph.afterTask { task, state ->
  if (!state.skipped) {
    project.logger.lifecycle "  üèÅ Finished after " + String.format("%.3f", Duration.between(task.ext.startTime, Instant.now()).toSeconds()) + " seconds."
  }
}
gradle.buildFinished {
  boolean wereTasksSkipped = false
  tasks.each {
    if (it.state.skipped) {
      if (!wereTasksSkipped) {
        it.logger.lifecycle("\nSkipped tasks:")
        wereTasksSkipped = true
      }
      it.logger.lifecycle("‚è≠Ô∏è  :" + it.name)
    }
  }
}
afterEvaluate {
  // use Javadoc generated by Dokka
  publishPluginJavaDocsJar.dependsOn.remove(javadoc)
  publishPluginJavaDocsJar.from(tasks.dokkaJavadoc.outputs)
}

repositories {
  jcenter()
}

dependencies {
  implementation localGroovy()
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

import org.jetbrains.dokka.gradle.DokkaTask
dokka {
  outputFormat = "html"
  outputDirectory = "$buildDir/docs/kdoc"
}

task dokkaJavadoc(type: DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/docs/javadoc"
}

tasks.withType(DokkaTask) {
  includes = ['src/main/kotlin/packages.md']
  jdkVersion = 8
  skipEmptyPackages = false
  externalDocumentationLink {
    url = new URL("https://docs.gradle.org/" + project.gradle.gradleVersion + "/javadoc/")
  }
  externalDocumentationLink {
    url = new URL("http://docs.groovy-lang.org/" + GroovySystem.getVersion() + "/html/api/")
  }
}

group = 'org.openstreetmap.josm'
version = "git describe --dirty --always".execute().text.trim()
version = version.charAt(0) == 'v' ? version.substring(1) : version

// for the plugin-publish (publish to plugins.gradle.org)
pluginBundle {
  website = 'https://github.com/floscher/gradle-josm-plugin#readme'
  vcsUrl = 'https://github.com/floscher/gradle-josm-plugin.git'
  description = 'This plugin helps with developing for the JOSM project.'
  tags = ['josm', 'openstreetmap', 'osm']

  plugins {
    josmPlugin {
      id = project.group
      displayName = 'Gradle JOSM plugin'
    }
  }
}
// for the java-gradle-plugin (local publishing)
gradlePlugin {
  plugins {
    josmPlugin {
      id = project.group
      implementationClass = 'org.openstreetmap.josm.gradle.plugin.JosmPlugin'
    }
  }
}

publishing {
  repositories {
    maven {
      url "$buildDir/maven"
    }
  }
}

tasks.publish {
  description 'Deploys the gradle-josm-plugin to a local Maven repository inside the $buildDir'
  doLast {
    printf "Version %s is now deployed to %s", project.version, publishing.repositories.maven.url
  }
}

eclipse.project {
  natures 'org.eclipse.buildship.core.gradleprojectnature',
    'org.eclipse.jdt.core.javanature',
    'org.jetbrains.kotlin.core.kotlinNature'
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  buildCommand 'org.eclipse.jdt.core.javabuilder'
  buildCommand 'org.jetbrains.kotlin.ui.kotlinBuilder'
}
