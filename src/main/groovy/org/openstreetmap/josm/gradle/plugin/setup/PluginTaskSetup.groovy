package org.openstreetmap.josm.gradle.plugin.setup

import org.gradle.api.Project
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.Sync
import org.gradle.api.tasks.TaskExecutionException

import org.openstreetmap.josm.gradle.plugin.RunJosmTask
import java.nio.file.Files
import java.nio.file.Paths

class PluginTaskSetup extends AbstractSetup {

  public void setup() {
    pro.task(
      [description: "Creates the configuration that tells JOSM which plugins to load (which is later automatically loaded by e.g. `runJosm`)"],
      'writePluginConfig',
      {t ->
        t.doFirst {
          def customConfig = new File(pro.buildDir, "/josm-custom-config/requiredPlugins.xml")
          customConfig.parentFile.mkdirs()
          pro.logger.lifecycle 'Write required plugins to {}â€¦', customConfig.absolutePath
          customConfig.withWriter ('UTF-8') { out ->
            out.println """<?xml version="1.0" encoding="UTF-8"?>
<!-- No need to edit this file! -->
<!-- This file is being autogenerated (and **overwritten**!) by Gradle each time the task `writePluginConfig` runs. -->
<!-- In order to add custom preferences, either edit \$buildDir/.josm/preferences.xml instead. Or create a custom config file next to this file and load it into JOSM via the command line argument - - load-preferences="..." -->
<!-- See https://josm.openstreetmap.de/wiki/Help/Preferences/ImportExport for documentation on this format -->
<config>
  <preferences operation="replace">
    <tag key='pluginmanager.time-based-update.policy' value='never'/>
    <tag key='pluginmanager.version-based-update.policy' value='never'/>
    <list key="plugins">"""
            pro.configurations.requiredPlugin.dependencies.each { dep ->
              out.println '      <entry value="' + dep.name + '"/>'
            }
            out.println '      <entry value="' + pro.archivesBaseName + '"/>'
            out.println """    </list>
  </preferences>
</config>"""
          }
        }
      }
    )

    pro.tasks.updateJosmPlugins.dependsOn pro.tasks.writePluginConfig, pro.tasks.initJosmPrefs
    pro.tasks.updateJosmPlugins.rename('(.*)-\\.jar', '$1.jar')
    pro.afterEvaluate {
      pro.tasks.updateJosmPlugins.from pro.tasks.dist.outputs
      pro.tasks.updateJosmPlugins.from pro.configurations.requiredPlugin.resolve()
    }


    def localDistPath = "${pro.buildDir}/localDist"
    def localDistListFile = new File("$localDistPath/list")

    pro.task(
      'generatePluginList',
      {t ->
        doFirst {
          localDistListFile.parentFile.mkdirs()
          if (localDistListFile.exists()) {
            localDistListFile.delete()
          }
          // First line containing the name of the plugin and the URL to the *.jar file
          localDistListFile << String.format(
            '%s;%s%n',
            pro.tasks.localDist.fileName,
            new File("$localDistPath/${pro.tasks.localDist.fileName}").toURI().toURL().toString()
          )
          // Manifest indented by one tab character
          pro.jar.manifest.effectiveManifest.attributes.each {a ->
            // Base64-encode the icon
            if ("Plugin-Icon".equals(a.key)) {
              for (def tree : pro.sourceSets.main.resources.srcDirTrees) {
                def iconFile = new File(tree.dir, a.value)
                if (iconFile.exists()) {
                  def contentType = Files.probeContentType(Paths.get(iconFile.absolutePath))
                  if (contentType == null) {
                    final BufferedInputStream bis = new BufferedInputStream(new FileInputStream(iconFile))
                    contentType = URLConnection.guessContentTypeFromStream(bis)
                    bis.close()
                  }
                  a.value = "data:" + contentType + ";base64," + iconFile.bytes.encodeBase64().toString()
                }
              }
            }
            // Append date to the plugin version
            if ("Plugin-Version".equals(a.key)) {
              a.value += "#" + String.format("%1\$tY-%1\$tm-%1\$tdT%1\$tH:%1\$tM:%1\$tS%1\$tz", new GregorianCalendar())
            }
            localDistListFile << "\t${a.key}: ${a.value}\n"
          }
        }
      }
    )

    pro.task(
      [type: Sync, group: "JOSM", description: "Generates a plugin site. Add '${localDistListFile.toURI().toURL()}'as plugin site in JOSM preferences (expert mode) and you'll be able to install the current development state as plugin '${pro.archivesBaseName}-dev'."],
      "localDist",
      {t ->
        t.ext.fileName = null
        finalizedBy pro.tasks.generatePluginList
        from pro.tasks.jar.outputs
        into localDistPath
        doFirst {
          t.ext.fileName = "${pro.archivesBaseName}-dev.${pro.jar.extension}"
          rename('.*', fileName)
        }
      }
    )

    pro.task(
      [type: Sync],
      "dist",
      {t ->
        from pro.tasks.jar.outputs
        into "${pro.buildDir}/dist"
        doFirst {
          rename('.*', pro.archivesBaseName + '.' + pro.jar.extension)
        }
      }
    )
    pro.tasks.jar.finalizedBy pro.tasks.dist
    pro.tasks.jar.finalizedBy pro.tasks.localDist
  }
}
