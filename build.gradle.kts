import groovy.lang.GroovySystem
import org.codehaus.groovy.runtime.DefaultGroovyMethods.printf
import org.gradle.api.internal.artifacts.repositories.layout.MavenRepositoryLayout
import org.jetbrains.dokka.DokkaConfiguration
import org.jetbrains.dokka.ExternalDocumentationLinkImpl
import org.jetbrains.dokka.gradle.DokkaPlugin
import org.jetbrains.dokka.gradle.DokkaTask
import java.time.Duration
import java.time.Instant
import java.net.URL

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-reflect:1.2.21")
  }
}

plugins {
  id("com.gradle.plugin-publish").version("0.9.10")
  id("com.github.ben-manes.versions").version("0.17.0")
  kotlin("jvm").version("1.2.21")
  id("org.jetbrains.dokka").version("0.9.16-eap-3")
  id("org.junit.platform.gradle.plugin").version("1.0.3")

  `maven`
  `eclipse`
  `java-gradle-plugin`
  `maven-publish`
}

gradle.taskGraph.beforeTask {
  val startTime by this.extra { Instant.now() }
}

gradle.taskGraph.afterTask {
  if (!state.skipped) {
    val startTime: Instant by this.extra
    project.logger.lifecycle(String.format("  üèÅ Finished after %.3f seconds.", Duration.between(startTime, Instant.now()).toMillis() / 1e3))
  }
}

gradle.buildFinished {
  var wereTasksSkipped = false
  tasks.forEach {
    if (it.state.skipped) {
      if (!wereTasksSkipped) {
        it.logger.lifecycle("\nSkipped tasks:")
        wereTasksSkipped = true
      }
      it.logger.lifecycle("‚è≠Ô∏è  :${it.name} (${it.state.skipMessage})")
    }
  }
}
afterEvaluate {
  // use Javadoc generated by Dokka
  tasks["publishPluginJavaDocsJar"].dependsOn.remove(tasks["javadoc"])
  tasks.withType(Jar::class.java)["publishPluginJavaDocsJar"].from(tasks.get("dokka"))
}

repositories {
  jcenter()
}

dependencies {
  val kotlinVersion: String by project.extra
  implementation(localGroovy())
  implementation("org.jetbrains.kotlin", "kotlin-stdlib-jdk8", kotlinVersion)
  testImplementation("org.junit.jupiter", "junit-jupiter-api", "5.0.3")
  testRuntime("org.junit.jupiter", "junit-jupiter-engine", "5.0.3")
}

tasks {
  "dokka"(DokkaTask::class) {
    outputFormat = "html"
    outputDirectory = "$buildDir/docs/kdoc"
  }
  withType(DokkaTask::class.java) {
    includes = listOf("src/main/kotlin/packages.md")
    jdkVersion = 8
    skipEmptyPackages = false

    externalDocumentationLinks.add(DokkaConfiguration.ExternalDocumentationLink.Builder(URL("https://docs.gradle.org/${project.gradle.gradleVersion}/javadoc/")).build())
    externalDocumentationLinks.add(DokkaConfiguration.ExternalDocumentationLink.Builder(URL("http://docs.groovy-lang.org/${GroovySystem.getVersion()}/html/api/")).build())
  }
}

group = "org.openstreetmap.josm"
val versionProcess = ProcessBuilder().command("git", "describe", "--dirty", "--always").start()
versionProcess.waitFor()
if (versionProcess.exitValue() != 0) {
  throw GradleException("Failed to determine version!")
}
val tmpVersion = versionProcess.inputStream.bufferedReader().readText().trim()
version = if (tmpVersion[0] == 'v') tmpVersion.substring(1) else tmpVersion

// for the plugin-publish (publish to plugins.gradle.org)
pluginBundle {
  website = "https://github.com/floscher/gradle-josm-plugin#readme"
  vcsUrl = "https://github.com/floscher/gradle-josm-plugin.git"
  description = "This plugin helps with developing for the JOSM project."
  tags = listOf("josm", "openstreetmap", "osm")

  plugins.create("josmPlugin") {
    id = project.group.toString()
    displayName = "Gradle JOSM plugin"
  }
}
// for the java-gradle-plugin (local publishing)
gradlePlugin {
  plugins.create("josmPlugin") {
    id = project.group.toString()
    implementationClass = "org.openstreetmap.josm.gradle.plugin.JosmPlugin"
  }
}

publishing {
  repositories {
    maven {
      setUrl("$buildDir/maven")
    }
  }
}
tasks {
  "publish" {
    description = "Deploys the gradle-josm-plugin to a local Maven repository inside the $buildDir"
    doLast {
      printf("Version %s is now deployed to %s%n", project.version.toString(), publishing.repositories.withType(MavenArtifactRepository::class.java)[0].url)
    }
  }
}

eclipse.project {
  natures(
    "org.eclipse.buildship.core.gradleprojectnature",
    "org.eclipse.jdt.core.javanature",
    "org.jetbrains.kotlin.core.kotlinNature"
  )
  buildCommand("org.eclipse.buildship.core.gradleprojectbuilder")
  buildCommand("org.eclipse.jdt.core.javabuilder")
  buildCommand("org.jetbrains.kotlin.ui.kotlinBuilder")
}
