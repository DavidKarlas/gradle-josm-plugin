import groovy.lang.GroovySystem
import org.jetbrains.dokka.DokkaConfiguration
import org.jetbrains.dokka.gradle.DokkaTask
import org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.openstreetmap.josm.gradle.plugin.GitDescriber
import org.openstreetmap.josm.gradle.plugin.Versions
import org.openstreetmap.josm.gradle.plugin.gitlab.gitlabRepository
import org.openstreetmap.josm.gradle.plugin.logCoverage
import org.openstreetmap.josm.gradle.plugin.logSkippedTasks
import org.openstreetmap.josm.gradle.plugin.logTaskDuration
import org.openstreetmap.josm.gradle.plugin.task.gitlab.ReleaseToGitlab
import java.net.URL

plugins {
  id("com.gradle.plugin-publish").version("0.10.1")
  id("com.github.ben-manes.versions").version("0.25.0")
  id("org.jetbrains.dokka").version("0.9.18")

  jacoco
  maven
  `java-gradle-plugin`
  `maven-publish`
}

apply(plugin = "kotlin")
apply(plugin = "kotlinx-serialization")


// Logging
gradle.taskGraph.logTaskDuration()
logSkippedTasks()
allprojects {
  afterEvaluate {
    tasks.withType(JacocoReport::class) {
      logCoverage()
    }
  }
  group = "org.openstreetmap.josm"
  version = GitDescriber(rootProject.projectDir).describe(trimLeading = true)

  repositories {
    jcenter()
  }

  tasks.withType(KotlinCompile::class) {
    kotlinOptions.jvmTarget = "1.8"
  }

  val jacocoTask = tasks.withType(JacocoReport::class).findByName("jacocoTestReport")
  tasks.withType(Test::class) {
    useJUnitPlatform()
    jacocoTask?.also { this.finalizedBy(it) }
  }

  this.extensions.findByType(JacocoPluginExtension::class)?.apply {
    toolVersion = Versions.jacoco
  }
}

afterEvaluate {
  // use Javadoc generated by Dokka
  tasks.named<Jar>("publishPluginJavaDocsJar") {
    setDependsOn(dependsOn - tasks.javadoc)
    from(tasks.dokka)
  }
}

// Add dependencies of "buildSrc" sources
val mainProject = this
project(":buildSrc").afterEvaluate {
  this.configurations.getByName(this.sourceSets.getByName("dual").implementationConfigurationName).dependencies.forEach {
    // Add all `dual` dependencies of the `buildSrc` project to `main` source set of this project
    mainProject.dependencies.implementation(it)
  }
}

project.gradle.projectsEvaluated {
  val dualJarFiles = project.project(":buildSrc").tasks.named<Jar>("dualJar").get().outputs.files
  project.sourceSets.main {
    compileClasspath += dualJarFiles
  }
  project.sourceSets.test {
    compileClasspath += dualJarFiles
    runtimeClasspath += dualJarFiles
  }
  tasks.jar {
    from(dualJarFiles.map { zipTree(it) })
  }
}

dependencies {
  implementation(localGroovy())
  implementation(kotlin("stdlib", Versions.kotlin))
  implementation("com.squareup.okhttp3", "okhttp", Versions.okhttp)
  implementation("com.beust","klaxon", Versions.klaxon)
  constraints {
    implementation(kotlin("reflect", Versions.kotlin)) { because("Align Kotlin version used by Klaxon dependencies with the one used by gradle-josm-plugin.") }
  }
  implementation("com.fasterxml.jackson.module", "jackson-module-kotlin", Versions.jackson)
  implementation("com.fasterxml.jackson.dataformat", "jackson-dataformat-yaml", Versions.jackson)
  implementation("com.vladsch.flexmark:flexmark:${Versions.flexmark}")

  testImplementation("org.junit.jupiter", "junit-jupiter-api", Versions.junit)
  testImplementation("com.github.tomakehurst","wiremock",Versions.wiremock)
  testImplementation("ru.lanwen.wiremock", "wiremock-junit5", Versions.wiremockJunit5)
  testRuntimeOnly("org.junit.jupiter", "junit-jupiter-engine", Versions.junit)
  testImplementation(kotlin("reflect"))
}

// Configure "dokka" task
val dokkaTask = tasks.withType(DokkaTask::class).getByName("dokka") {
  outputFormat = "html"
  outputDirectory = "$buildDir/docs/kdoc"
}

gradle.projectsEvaluated {
  project(":buildSrc").sourceSets.getByName("dual").withConvention(KotlinSourceSet::class) {
    dokkaTask.sourceDirs = dokkaTask.sourceDirs.plus(this.kotlin.srcDirs)
  }
}

// Configure all Dokka tasks
tasks.withType(DokkaTask::class) {
  includes = listOfNotNull("src/main/kotlin/packages.md")
  jdkVersion = 8
  skipEmptyPackages = false

  externalDocumentationLinks.add(DokkaConfiguration.ExternalDocumentationLink.Builder(URL("https://docs.gradle.org/${project.gradle.gradleVersion}/javadoc/")).build())
  externalDocumentationLinks.add(DokkaConfiguration.ExternalDocumentationLink.Builder(URL("http://docs.groovy-lang.org/${GroovySystem.getVersion()}/html/api/")).build())
}

// for the plugin-publish (publish to plugins.gradle.org)
pluginBundle {
  website = "https://gitlab.com/floscher/gradle-josm-plugin#readme"
  vcsUrl = "https://gitlab.com/floscher/gradle-josm-plugin.git"
  description = "This plugin helps with developing for the JOSM project."
  tags = listOf("josm", "openstreetmap", "osm")

  plugins.create("josmPlugin") {
    id = project.group.toString()
    displayName = "Gradle JOSM plugin"
  }
}
// for the java-gradle-plugin (local publishing)
gradlePlugin {
  plugins.create("josmPlugin") {
    id = project.group.toString()
    implementationClass = "org.openstreetmap.josm.gradle.plugin.JosmPlugin"
  }
}

val buildDirRepo = publishing.repositories.maven("$buildDir/maven") {
  name = "buildDir"
}

val awsAccessKeyId: String? = System.getenv("AWS_ACCESS_KEY_ID")
val awsSecretAccessKey: String? = System.getenv("AWS_SECRET_ACCESS_KEY")
val s3Repo = if (awsAccessKeyId == null || awsSecretAccessKey == null) {
  logger.lifecycle(
    "Note: If you want to be able to publish the plugin to s3://gradle-josm-plugin , set the environment variables AWS_ACCESS_KEY_ID ({} set) and AWS_SECRET_ACCESS_KEY ({} set).",
    if (awsAccessKeyId == null) { "not" } else { "is" },
    if (awsSecretAccessKey == null) { "not" } else { "is" }
  )
  null
} else {
  publishing.repositories.maven("s3://gradle-josm-plugin") {
    name = "s3"
    credentials(AwsCredentials::class.java) {
      accessKey = awsAccessKeyId
      secretKey = awsSecretAccessKey
    }
  }
}

gradle.projectsEvaluated {
  tasks.withType(PublishToMavenRepository::class) {
    if (repository == buildDirRepo) {
      tasks.withType(Test::class).forEach {
        it.dependsOn(this)
      }
    }

    doLast {
      logger.lifecycle("""
        Published artifact:

           to URL: ${repository.url}
            Group: ${publication.groupId}
               ID: ${publication.artifactId}
          Version: ${publication.version}

      """.trimIndent())
    }
  }
}

// Create GitLab Maven repository to publish to.
publishing.repositories.gitlabRepository("gitlab", project.logger)

// Create `releaseToGitlab` task that can publish a release based on a Gitlab Maven package for a tag.
val releaseToGitlab = tasks.create(
  "releaseToGitlab",
  ReleaseToGitlab::class,
  { GitDescriber(rootProject.projectDir).describe(false) },
  { project.version },
  setOf("org/openstreetmap/josm/gradle-josm-plugin", "org/openstreetmap/josm/langconv")
)
